FROM us-docker.pkg.dev/spinnaker-community/docker/halyard:stable
USER root
WORKDIR /tmp

ARG AWS_KEY_ID
ARG AWS_SECRET_KEY
ARG REGION
ARG CLUSTER_NAME
ARG S3_BUCKET
ARG AWS_ACCOUNT_ID

ENV AWS_ACCESS_KEY_ID=$AWS_KEY_ID
ENV AWS_SECRET_ACCESS_KEY=$AWS_SECRET_KEY
ENV AWS_DEFAULT_REGION=$REGION
ENV CLUSTER_NAME=$CLUSTER_NAME
ENV REGION=$REGION
ENV S3_BUCKET=$S3_BUCKET
ENV AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID

RUN mkdir ~/.aws

RUN printf "[default] \n\
aws_access_key_id=${AWS_ACCESS_KEY_ID} \n\
aws_secret_access_key=${AWS_SECRET_ACCESS_KEY} \n\
region=${AWS_DEFAULT_REGION} \n\
" >> ~/.aws/credentials


RUN aws eks update-kubeconfig --region ${REGION} --name ${CLUSTER_NAME}

COPY roles.yaml roles.yaml
COPY setup.sh setup.sh

RUN kubectl apply --context $(kubectl config current-context) -f roles.yaml

RUN export TOKEN=$(kubectl get secret -n spinnaker sa-secret -o jsonpath='{.data.token}'); \
  export CONTEXT=$(kubectl config current-context); \
    echo $TOKEN >> token.txt; \
  kubectl config set-credentials ${CONTEXT}-token-user --token $TOKEN; \
  kubectl config set-context $CONTEXT --user ${CONTEXT}-token-user;

USER spinnaker
RUN \
  TOKEN=$(aws ecr get-authorization-token --region $REGION --output text --query 'authorizationData[].authorizationToken'  --registry-ids $AWS_ACCOUNT_ID | base64 -d | sed 's/^AWS://'); \
  echo $TOKEN >> newtoken.txt;

CMD ./setup.sh



